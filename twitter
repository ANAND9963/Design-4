class Twitter {
    class Tweet {
        private int id;
        private int createdAt;

        private Tweet(int tweetId, int time) {
            this.id = tweetId;
            this.createdAt = time;
        }
    }

    private HashMap<Integer, HashSet<Integer>> followedMap;
    private HashMap<Integer, List<Tweet>> tweetsMap;
    private int time;

    public Twitter() {
        this.followedMap = new HashMap<>();
        this.tweetsMap = new HashMap<>();
        this.time = 0; // Initialize time
    }

    public void postTweet(int userId, int tweetId) {
        follow(userId, userId); // A user should always follow themselves
        if (!tweetsMap.containsKey(userId)) {
            tweetsMap.put(userId, new ArrayList<>());
        }
        Tweet newTweet = new Tweet(tweetId, time++);
        tweetsMap.get(userId).add(newTweet);
    }

    public List<Integer> getNewsFeed(int userId) {
        PriorityQueue<Tweet> pq = new PriorityQueue<>((a, b) -> b.createdAt - a.createdAt);
        HashSet<Integer> followeds = followedMap.get(userId);
        if (followeds != null) {
            for (Integer fId : followeds) {
                List<Tweet> fTweets = tweetsMap.get(fId);
                if (fTweets != null) {
                    for (Tweet fTweet : fTweets) {
                        pq.add(fTweet);
                    }
                }
            }
        }
        List<Integer> result = new ArrayList<>();
        int count = 0;
        while (!pq.isEmpty() && count < 10) {
            result.add(pq.poll().id);
            count++;
        }
        return result;
    }

    public void follow(int followerId, int followeeId) {
        if (!followedMap.containsKey(followerId)) {
            followedMap.put(followerId, new HashSet<>());
        }
        followedMap.get(followerId).add(followeeId);
    }

    public void unfollow(int followerId, int followeeId) {
        if (followedMap.containsKey(followerId) && followerId != followeeId) {
            followedMap.get(followerId).remove(followeeId);
        }
    }
}
